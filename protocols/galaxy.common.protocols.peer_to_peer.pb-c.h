/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: galaxy.common.protocols.peer_to_peer.proto */

#ifndef PROTOBUF_C_galaxy_2ecommon_2eprotocols_2epeer_5fto_5fpeer_2eproto__INCLUDED
#define PROTOBUF_C_galaxy_2ecommon_2eprotocols_2epeer_5fto_5fpeer_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "galaxy.common.protocols.peer_common.pb-c.h"

typedef struct Galaxy__Common__Protocols__PeerToPeer__LobbyPropertiesNotification Galaxy__Common__Protocols__PeerToPeer__LobbyPropertiesNotification;
typedef struct Galaxy__Common__Protocols__PeerToPeer__LobbyMemberPropertiesNotification Galaxy__Common__Protocols__PeerToPeer__LobbyMemberPropertiesNotification;
typedef struct Galaxy__Common__Protocols__PeerToPeer__CustomPacket Galaxy__Common__Protocols__PeerToPeer__CustomPacket;
typedef struct Galaxy__Common__Protocols__PeerToPeer__LobbyMessage Galaxy__Common__Protocols__PeerToPeer__LobbyMessage;


/* --- enums --- */

typedef enum _Galaxy__Common__Protocols__PeerToPeer__MessageType {
  GALAXY__COMMON__PROTOCOLS__PEER_TO_PEER__MESSAGE_TYPE__UNKNOWN_MESSAGE = 0,
  GALAXY__COMMON__PROTOCOLS__PEER_TO_PEER__MESSAGE_TYPE__LOBBY_PROPERTIES_NOTIFICATION = 1,
  GALAXY__COMMON__PROTOCOLS__PEER_TO_PEER__MESSAGE_TYPE__LOBBY_MEMBER_PROPERTIES_NOTIFICATION = 2,
  GALAXY__COMMON__PROTOCOLS__PEER_TO_PEER__MESSAGE_TYPE__CUSTOM_PACKET = 3,
  GALAXY__COMMON__PROTOCOLS__PEER_TO_PEER__MESSAGE_TYPE__LOBBY_MESSAGE = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GALAXY__COMMON__PROTOCOLS__PEER_TO_PEER__MESSAGE_TYPE)
} Galaxy__Common__Protocols__PeerToPeer__MessageType;
typedef enum _Galaxy__Common__Protocols__PeerToPeer__LobbyType {
  GALAXY__COMMON__PROTOCOLS__PEER_TO_PEER__LOBBY_TYPE__LOBBY_TYPE_PRIVATE = 0,
  GALAXY__COMMON__PROTOCOLS__PEER_TO_PEER__LOBBY_TYPE__LOBBY_TYPE_FRIENDS_ONLY = 1,
  GALAXY__COMMON__PROTOCOLS__PEER_TO_PEER__LOBBY_TYPE__LOBBY_TYPE_PUBLIC = 2,
  GALAXY__COMMON__PROTOCOLS__PEER_TO_PEER__LOBBY_TYPE__LOBBY_TYPE_INVISIBLE_TO_FRIENDS = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GALAXY__COMMON__PROTOCOLS__PEER_TO_PEER__LOBBY_TYPE)
} Galaxy__Common__Protocols__PeerToPeer__LobbyType;

/* --- messages --- */

struct  Galaxy__Common__Protocols__PeerToPeer__LobbyPropertiesNotification
{
  ProtobufCMessage base;
  protobuf_c_boolean has_lobby_id;
  uint64_t lobby_id;
  size_t n_properties;
  Galaxy__Common__Protocols__PeerCommon__Property **properties;
  protobuf_c_boolean has_member_max_count;
  uint32_t member_max_count;
  protobuf_c_boolean has_lobby_type;
  Galaxy__Common__Protocols__PeerToPeer__LobbyType lobby_type;
  protobuf_c_boolean has_joinable;
  protobuf_c_boolean joinable;
};
#define GALAXY__COMMON__PROTOCOLS__PEER_TO_PEER__LOBBY_PROPERTIES_NOTIFICATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&galaxy__common__protocols__peer_to_peer__lobby_properties_notification__descriptor) \
, 0, 0, 0,NULL, 0, 0, 0, GALAXY__COMMON__PROTOCOLS__PEER_TO_PEER__LOBBY_TYPE__LOBBY_TYPE_PRIVATE, 0, 0 }


struct  Galaxy__Common__Protocols__PeerToPeer__LobbyMemberPropertiesNotification
{
  ProtobufCMessage base;
  protobuf_c_boolean has_lobby_id;
  uint64_t lobby_id;
  size_t n_properties;
  Galaxy__Common__Protocols__PeerCommon__Property **properties;
};
#define GALAXY__COMMON__PROTOCOLS__PEER_TO_PEER__LOBBY_MEMBER_PROPERTIES_NOTIFICATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&galaxy__common__protocols__peer_to_peer__lobby_member_properties_notification__descriptor) \
, 0, 0, 0,NULL }


struct  Galaxy__Common__Protocols__PeerToPeer__CustomPacket
{
  ProtobufCMessage base;
  char *data;
  protobuf_c_boolean has_channel;
  uint32_t channel;
  protobuf_c_boolean has_lobby_id;
  uint64_t lobby_id;
  protobuf_c_boolean has_seq;
  uint64_t seq;
};
#define GALAXY__COMMON__PROTOCOLS__PEER_TO_PEER__CUSTOM_PACKET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&galaxy__common__protocols__peer_to_peer__custom_packet__descriptor) \
, NULL, 0, 0, 0, 0, 0, 0 }


struct  Galaxy__Common__Protocols__PeerToPeer__LobbyMessage
{
  ProtobufCMessage base;
  protobuf_c_boolean has_lobby_id;
  uint64_t lobby_id;
  char *data;
};
#define GALAXY__COMMON__PROTOCOLS__PEER_TO_PEER__LOBBY_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&galaxy__common__protocols__peer_to_peer__lobby_message__descriptor) \
, 0, 0, NULL }


/* Galaxy__Common__Protocols__PeerToPeer__LobbyPropertiesNotification methods */
void   galaxy__common__protocols__peer_to_peer__lobby_properties_notification__init
                     (Galaxy__Common__Protocols__PeerToPeer__LobbyPropertiesNotification         *message);
size_t galaxy__common__protocols__peer_to_peer__lobby_properties_notification__get_packed_size
                     (const Galaxy__Common__Protocols__PeerToPeer__LobbyPropertiesNotification   *message);
size_t galaxy__common__protocols__peer_to_peer__lobby_properties_notification__pack
                     (const Galaxy__Common__Protocols__PeerToPeer__LobbyPropertiesNotification   *message,
                      uint8_t             *out);
size_t galaxy__common__protocols__peer_to_peer__lobby_properties_notification__pack_to_buffer
                     (const Galaxy__Common__Protocols__PeerToPeer__LobbyPropertiesNotification   *message,
                      ProtobufCBuffer     *buffer);
Galaxy__Common__Protocols__PeerToPeer__LobbyPropertiesNotification *
       galaxy__common__protocols__peer_to_peer__lobby_properties_notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   galaxy__common__protocols__peer_to_peer__lobby_properties_notification__free_unpacked
                     (Galaxy__Common__Protocols__PeerToPeer__LobbyPropertiesNotification *message,
                      ProtobufCAllocator *allocator);
/* Galaxy__Common__Protocols__PeerToPeer__LobbyMemberPropertiesNotification methods */
void   galaxy__common__protocols__peer_to_peer__lobby_member_properties_notification__init
                     (Galaxy__Common__Protocols__PeerToPeer__LobbyMemberPropertiesNotification         *message);
size_t galaxy__common__protocols__peer_to_peer__lobby_member_properties_notification__get_packed_size
                     (const Galaxy__Common__Protocols__PeerToPeer__LobbyMemberPropertiesNotification   *message);
size_t galaxy__common__protocols__peer_to_peer__lobby_member_properties_notification__pack
                     (const Galaxy__Common__Protocols__PeerToPeer__LobbyMemberPropertiesNotification   *message,
                      uint8_t             *out);
size_t galaxy__common__protocols__peer_to_peer__lobby_member_properties_notification__pack_to_buffer
                     (const Galaxy__Common__Protocols__PeerToPeer__LobbyMemberPropertiesNotification   *message,
                      ProtobufCBuffer     *buffer);
Galaxy__Common__Protocols__PeerToPeer__LobbyMemberPropertiesNotification *
       galaxy__common__protocols__peer_to_peer__lobby_member_properties_notification__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   galaxy__common__protocols__peer_to_peer__lobby_member_properties_notification__free_unpacked
                     (Galaxy__Common__Protocols__PeerToPeer__LobbyMemberPropertiesNotification *message,
                      ProtobufCAllocator *allocator);
/* Galaxy__Common__Protocols__PeerToPeer__CustomPacket methods */
void   galaxy__common__protocols__peer_to_peer__custom_packet__init
                     (Galaxy__Common__Protocols__PeerToPeer__CustomPacket         *message);
size_t galaxy__common__protocols__peer_to_peer__custom_packet__get_packed_size
                     (const Galaxy__Common__Protocols__PeerToPeer__CustomPacket   *message);
size_t galaxy__common__protocols__peer_to_peer__custom_packet__pack
                     (const Galaxy__Common__Protocols__PeerToPeer__CustomPacket   *message,
                      uint8_t             *out);
size_t galaxy__common__protocols__peer_to_peer__custom_packet__pack_to_buffer
                     (const Galaxy__Common__Protocols__PeerToPeer__CustomPacket   *message,
                      ProtobufCBuffer     *buffer);
Galaxy__Common__Protocols__PeerToPeer__CustomPacket *
       galaxy__common__protocols__peer_to_peer__custom_packet__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   galaxy__common__protocols__peer_to_peer__custom_packet__free_unpacked
                     (Galaxy__Common__Protocols__PeerToPeer__CustomPacket *message,
                      ProtobufCAllocator *allocator);
/* Galaxy__Common__Protocols__PeerToPeer__LobbyMessage methods */
void   galaxy__common__protocols__peer_to_peer__lobby_message__init
                     (Galaxy__Common__Protocols__PeerToPeer__LobbyMessage         *message);
size_t galaxy__common__protocols__peer_to_peer__lobby_message__get_packed_size
                     (const Galaxy__Common__Protocols__PeerToPeer__LobbyMessage   *message);
size_t galaxy__common__protocols__peer_to_peer__lobby_message__pack
                     (const Galaxy__Common__Protocols__PeerToPeer__LobbyMessage   *message,
                      uint8_t             *out);
size_t galaxy__common__protocols__peer_to_peer__lobby_message__pack_to_buffer
                     (const Galaxy__Common__Protocols__PeerToPeer__LobbyMessage   *message,
                      ProtobufCBuffer     *buffer);
Galaxy__Common__Protocols__PeerToPeer__LobbyMessage *
       galaxy__common__protocols__peer_to_peer__lobby_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   galaxy__common__protocols__peer_to_peer__lobby_message__free_unpacked
                     (Galaxy__Common__Protocols__PeerToPeer__LobbyMessage *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Galaxy__Common__Protocols__PeerToPeer__LobbyPropertiesNotification_Closure)
                 (const Galaxy__Common__Protocols__PeerToPeer__LobbyPropertiesNotification *message,
                  void *closure_data);
typedef void (*Galaxy__Common__Protocols__PeerToPeer__LobbyMemberPropertiesNotification_Closure)
                 (const Galaxy__Common__Protocols__PeerToPeer__LobbyMemberPropertiesNotification *message,
                  void *closure_data);
typedef void (*Galaxy__Common__Protocols__PeerToPeer__CustomPacket_Closure)
                 (const Galaxy__Common__Protocols__PeerToPeer__CustomPacket *message,
                  void *closure_data);
typedef void (*Galaxy__Common__Protocols__PeerToPeer__LobbyMessage_Closure)
                 (const Galaxy__Common__Protocols__PeerToPeer__LobbyMessage *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    galaxy__common__protocols__peer_to_peer__message_type__descriptor;
extern const ProtobufCEnumDescriptor    galaxy__common__protocols__peer_to_peer__lobby_type__descriptor;
extern const ProtobufCMessageDescriptor galaxy__common__protocols__peer_to_peer__lobby_properties_notification__descriptor;
extern const ProtobufCMessageDescriptor galaxy__common__protocols__peer_to_peer__lobby_member_properties_notification__descriptor;
extern const ProtobufCMessageDescriptor galaxy__common__protocols__peer_to_peer__custom_packet__descriptor;
extern const ProtobufCMessageDescriptor galaxy__common__protocols__peer_to_peer__lobby_message__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_galaxy_2ecommon_2eprotocols_2epeer_5fto_5fpeer_2eproto__INCLUDED */
